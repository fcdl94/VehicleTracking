<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.vechicleTrackingSystem.org/model" xmlns:s="http://www.vechicleTrackingSystem.org/model" elementFormDefault="qualified">

<!-- merge a vehicle (embeds the path) and graph definition for the response of admission request -->
<!-- We chose to have a response with embedded both the vehicle's path and the relative information of the graph (partial) -->
	<element name="vehicleComplete" type="s:VehicleComplete" >
		<keyref name="pathRefKey" refer="s:nodeKey">
			<selector xpath="vehicleComplete/vehicle/path" />
			<field xpath="node" />
		</keyref>
		<keyref name="vechicleCompleteRefKey" refer="s:portKey">
			<selector xpath="vehicleComplete/vehicle" />
			<field xpath="currentPosition/node" />
			<field xpath="currentPosition/port" />
		</keyref>
		<keyref name="vechicleCompleteRefKeyDestination" refer="s:nodeKey">
			<selector xpath="vehicleComplete/vehicle" />
			<field xpath="destination" />
		</keyref>
	</element>
	
	<complexType name="VehicleComplete">
			<sequence>
				<element ref="s:vehicle" />
				<element ref="s:graph" />				
			</sequence>
	</complexType>
	
<!-- element to be load at startup, I will call it model to represent the fact that is the model of the system, representing it status at a given time -->
<!-- I'm assuming that vehicle at startup have no path to follow -->
	<element name="model" type="s:Model">
		<keyref name="vechicleRefKey" refer="s:nodeKey">
			<selector xpath="model/vehicles/vehicle" />
			<field xpath="currentPosition" />
		</keyref>
	</element>
	
	<complexType name="Model">
		<sequence>
			<element ref="s:graph"/>
			<element ref="s:vehicles" minOccurs="0"/>
		</sequence>
	</complexType>

<!-- Graph definition -->
<!-- Basic type of the graph is node which can be extended in parking area and route.
		Each type of extension have its own constraint that can be defined independently 
		The nodes are bound with connection which represent the edge of the graph.
		Each arc (connection) is oriented so I assumed each connection is unidirectional (to represent one-way route)
-->
	<element name="graph" type="s:Graph" >
		<key name="nodeKey">
			<selector xpath="graph/node" />
			<field xpath="@ID" />
		</key>
		<key name="portKey">
			<selector xpath="graph/node" />
			<field xpath="@ID" />
			<field xpath="port" />
		</key>
		<keyref name="connectionNodeFrom" refer="s:portKey">
			<selector xpath="graph/connection/from" />
			<field xpath="node" />
			<field xpath="port" />
		</keyref>
		<keyref name="connectionNodeTo" refer="s:portKey">
			<selector xpath="graph/connection/to" />
			<field xpath="node" />
			<field xpath="port" />
		</keyref>
	</element>
	
	
	<complexType name="Graph" >
		<sequence>
			<element name="node" type="s:Node" maxOccurs="unbounded"/>
			<element name="connection" type="s:Connection" maxOccurs="unbounded" />
		</sequence>
	</complexType>	
	
	<complexType name="Node">
		<sequence>
			<element name="name" type="string" />
			<element name="port" maxOccurs="unbounded" type="string" />
		</sequence>
		<attribute name="ID" type="string" />
	</complexType>
	
	<complexType name="Road">
	<!-- End Point represent the fact that a route can be an entry/exit point of the restricted area
			the max vehicle constraint limits the number of car in that route-->
		<complexContent>
			<extension base="s:Node">
				<sequence>
					<element name="endpoint" type="string" minOccurs="0" />  <!-- Should have it unbounded endpoints?! -->
					<element name="maxVehicle" type="positiveInteger" />
				</sequence>
			</extension>
		</complexContent>
	</complexType>
   
	<complexType name="ParkingArea">
	<!-- The max vehicle constraint represent the number of parking spot -->
		<complexContent>
			<extension base="s:Node">
				<sequence>
					<element name="maxVehicle" type="positiveInteger" />
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	
	
	<complexType name="Connection" >
	 	<sequence>
	   		<element name="from" type="s:NodeRef" />
	   		<element name="to" type="s:NodeRef" />
	   	</sequence>
	</complexType>
	
	<complexType name="NodeRef">
		<sequence>
			<element name="node" type="string" />
			<element name="port" type="string" />
		</sequence>
	</complexType>

<!-- vehicle definition -->
	<!-- each vehicle has 
		position (a NodeRef referencing the node+port in graph)
		destination (string that reference a node) 
		state indicating if the vehicle is parked or in transit
		the path that is it following
		entry time is the time while the vehicle entered the system
		last update is the time in which the last position is received (at starting point this field is equal to entry time)
		The plate number is not the ID because in the specification is request the assignment of an ID by the service 
			also I kept a general string as a type for plate due to the different representations of plate code in each country -->
	<element name="vehicles" type="s:Vehicles"/>

	<complexType name="Vehicles">
		<sequence>
			<element ref="s:vehicle" maxOccurs="unbounded" minOccurs="0"/>
		</sequence>
	</complexType>
	
	<element name="vehicle" type="s:Vehicle" >
		<key name="vehicleKey">
			<selector xpath="vechicle" />
			<field xpath="@ID" />
		</key>
	</element>
	
	<complexType name="Vehicle" >
		<sequence>
			<element name="currentPosition" type="s:NodeRef" />
			<element name="destination" type="string" />
			<element name="state" type="s:State" minOccurs="0" />
			<element ref="s:path" minOccurs="0" />
			<element name="entry_time" type="dateTime" minOccurs="0"/>
			<element name="last_update" type="dateTime" minOccurs="0" />
			<element name="plateNumber" type="string" />
		</sequence>
		<attribute name="ID" type="integer" />
	</complexType>
	
	<complexType name="Car">
		<complexContent>
			<extension base="s:Vehicle">
				<sequence>
					<!-- something in the future -->
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	
	<simpleType name="State" >
		<restriction base="string">
			<enumeration value="transit" />
			<enumeration value="parked" />
		</restriction>
	</simpleType>
	
	
<!-- PATH DEFINITION -->

	<element name="path" type="s:Path" />
	
	<complexType name="Path">
		<sequence>
			<element name="node" type="s:PathNode" maxOccurs="unbounded" />
		</sequence>
	</complexType>

	<complexType name="PathNode">
		<complexContent>
			<extension base="s:Connection">
				<attribute name="sequenceNum" type="int" />
			</extension>
		</complexContent>
	</complexType>

</schema>
